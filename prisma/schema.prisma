// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model Supplier { 
  id Int @id @default(autoincrement())
  first_name String? 
  last_name String? 
  business_name String? 
  email String? 
  phone String? 
  address String? 
  supplier_type SupplierType
  transactions Transaction[] //One to many relationships with transactions
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

}
model Customer {
  id Int @id @default(autoincrement())
  first_name String?
  last_name String?
  business_name String?
  email String?
  phone String?
  address String?
  customer_type CustomerType @default(individual)
  transactionItems Transaction[] //One to many relationships with transactions
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
model RawMaterials { 
  id Int @id @default(autoincrement())
  name String
  description String?
  transactionItems TransactionItems[]
  unit_id      Int?     // Foreign key
  unit        Unit?    @relation(fields: [unit_id], references: [id])
  reorder_point Decimal @default(0.0)
  bom_list BillOfMaterialsList[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
model Product {
  id Int @id @default(autoincrement())
  name String 
  unit_id  Int?     // Foreign key
  unit  Unit?    @relation(fields: [unit_id], references: [id])
  selling_price Decimal @default(0)
  description String? 
  product_sizes ProductSize[]
  bom BillOfMaterials[]
  created_at DateTime @default(now()) 
  updated_at DateTime @updatedAt
}
model Size {
  id Int @id @default(autoincrement())
  name String
  size ProductSize[]
  created_at DateTime @default(now()) 
  updated_at DateTime @updatedAt
}
model ProductSize {
  id Int @id @default(autoincrement())
  product_id Int?
  size_id Int?
  sizes Size? @relation(fields: [size_id], references: [id])
  transactions TransactionItems[] //One to many relationships with transactions 
  products Product? @relation(fields: [product_id], references: [id])
}

model Color {
  id Int @id @default(autoincrement())
  name String
  colors TransactionItems[]
  created_at DateTime @default(now()) 
  updated_at DateTime @updatedAt
}
model Unit { 
  id Int @id @default(autoincrement())
  name String
  description String?
  symbol String
  rawMaterials RawMaterials[]
  products Product[] 
  created_at DateTime @default(now()) 
  updated_at DateTime @updatedAt
}
model Transaction {
  id Int @id @default(autoincrement())
  transaction_type TransactionType
  customer_id Int? //Foreign key for customer
  supplier_id Int?
  order_id Int?
  payment_method String?
  transaction_date DateTime
  sale_status SalesStatus?
  manufacturing_status ManufacturingStatus?
  manufaction_costs_items ManufacturingCostItems[]
  transaction_items TransactionItems[]
  customer Customer? @relation(fields: [customer_id], references: [id])
  supplier Supplier? @relation(fields: [supplier_id], references: [id])
  created_at DateTime @default(now()) 
  updated_at DateTime @updatedAt
}
model ManufacturingCostItems {
  id Int @id @default(autoincrement())
  cost Decimal @default(0.0)
  manufacturing_cost_id Int?
  transaction_id Int?
  manufacturing_costs ManufacturingCost? @relation(fields: [manufacturing_cost_id], references: [id])
  transactions Transaction? @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
}
model ManufacturingCost {
  id Int @id @default(autoincrement())
  name String
  cost Decimal @default(0.0)
  ManufacturingCostItems ManufacturingCostItems[]
}

model TransactionItems {
  id Int @id @default(autoincrement())
  quantity Decimal @default(0.0)
  remaining_quantity Decimal @default(0.0)
  pending_quantity Decimal @default(0.0)
  cost Decimal @default(0.0)
  material_id Int? //Foreign key for raw material
  product_size_id Int? //Foreign key for product 
  color_id Int?
  transaction_id Int
  transactions Transaction? @relation(fields: [transaction_id], references: [id], onDelete: Cascade)
  product_size ProductSize? @relation(fields: [product_size_id], references: [id])
  raw_material RawMaterials? @relation(fields: [material_id], references: [id])
  color Color? @relation(fields: [color_id], references: [id])
  created_at DateTime @default(now()) 
  updated_at DateTime @updatedAt
}
model BillOfMaterials {
    id Int @id @default(autoincrement())
    product_id Int
    quantity Decimal @default(0.0)
    bom_date DateTime
    bom_list BillOfMaterialsList[]
    product Product @relation(fields: [product_id], references: [id])
    created_at DateTime @default(now()) 
    updated_at DateTime @updatedAt
}
model BillOfMaterialsList {
  id Int @id @default(autoincrement())
  bom_id Int 
  material_id Int 
  quantity Decimal @default(0.0)
  bom BillOfMaterials @relation(fields: [bom_id], references: [id])
  material RawMaterials @relation(fields: [material_id], references: [id])
  created_at DateTime @default(now()) 
  updated_at DateTime @updatedAt
}

enum TransactionType {
  purchase
  sale
  manufacturing
  adjustment
  opening_stock
  production
  bom
}

enum CustomerType {
  business
  individual
}
enum SupplierType { 
  business
  individual
}

enum SalesStatus {
  pending 
  processing
  fulfilled
}
enum ManufacturingStatus {
  cutting
  sticking
  lasting
  finished
}